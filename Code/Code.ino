#include <SPI.h> 
#include <Wire.h> 
#include <Adafruit_GFX.h> 
#include <Adafruit_SSD1306.h> 
#include <NTPClient.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
//#include <WiFi.h>
#include "Timer.h"
#include <millisDelay.h>
#include <AsyncTimer.h>
#include <memory>

//*********************************************//
char *ssid = "---";    
char *password = "---"; 

char *homessid = "---";    
char *homepassword = "---"; 

char *canpanyssid = "---";    
char *canpanypassword = "---"; 

const char *ntpServer = "asia.pool.ntp.org";
const long gmtOffset_sec = 8 * 3600;
const int daylightOffset_sec = 0;
//*********************************************//

const long utcOffsetInSeconds = 8*3600;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
String months[12]={"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
String weekDays[7]={"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);

AsyncTimer t;

int index_pca = 0 ;
bool is_connect = false;

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


const unsigned char gImage_createbyyunen[1024] = { /* 0X00,0X01,0X80,0X00,0X40,0X00, */
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X00,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X01,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X03,0X01,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X02,0X00,0X80,0X00,0X00,0X01,0X80,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X06,0X00,0X80,0X00,0X00,0X00,0X80,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X06,0X00,0X80,0X00,0X00,0X00,0X80,0X00,0X00,0X00,0X60,0X00,0X00,0X00,0X00,
0X00,0X06,0X00,0X00,0X00,0X00,0X00,0X40,0X07,0X00,0X00,0X7C,0X00,0X00,0X00,0X00,
0X00,0X06,0X00,0X01,0XE0,0X00,0X18,0X40,0X09,0X80,0X00,0X77,0X22,0X00,0X00,0X00,
0X00,0X06,0X00,0X03,0X00,0X00,0X07,0XFF,0X88,0X80,0X00,0X61,0XB7,0X00,0X00,0X00,
0X00,0X06,0X03,0X86,0X1F,0X00,0X00,0X40,0X09,0X80,0X00,0X60,0X95,0X02,0X00,0X00,
0X00,0X06,0X00,0X6C,0X11,0X8F,0X00,0X20,0X11,0X00,0X00,0X60,0X9D,0X0C,0X00,0X00,
0X00,0X06,0X00,0X38,0X20,0X98,0XC0,0X20,0X16,0X00,0X00,0X60,0X89,0X18,0X00,0X00,
0X00,0X06,0X00,0X10,0X21,0X90,0XE0,0X20,0X78,0X00,0X00,0X61,0X80,0XE0,0X00,0X00,
0X00,0X06,0X00,0X10,0X3F,0X10,0X70,0X20,0XC8,0X00,0X00,0X67,0X01,0X80,0X00,0X00,
0X00,0X06,0X01,0X18,0X30,0X10,0X50,0X11,0X88,0X10,0X00,0X7C,0X02,0X80,0X00,0X00,
0X00,0X02,0X03,0X08,0X10,0X18,0X48,0X13,0X0C,0X70,0X00,0X00,0X04,0X40,0X00,0X00,
0X00,0X03,0X06,0X08,0X0C,0X08,0X46,0X16,0X07,0X80,0X00,0X00,0X18,0X40,0X00,0X00,
0X00,0X03,0XFE,0X00,0X07,0X8E,0XC0,0X18,0X00,0X00,0X00,0X00,0XE0,0X40,0X00,0X00,
0X00,0X00,0XFC,0X00,0X00,0X83,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X40,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X00,0X60,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X00,0X20,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X04,0X00,0X40,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X04,0X00,0X40,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0X00,0X40,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0XE1,0X80,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XC0,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X01,0X80,0X00,0X3F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X01,0X80,0X00,0X18,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X38,0X03,0X00,0X00,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X08,0X06,0X00,0X00,0X04,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X04,0X0C,0X00,0X00,0X04,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X02,0X1C,0X00,0X00,0X02,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X01,0XF8,0X00,0X00,0X02,0X00,0X00,0X00,0X01,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X10,0X00,0X00,0X02,0X00,0X00,0X00,0X09,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X10,0X00,0X00,0X02,0X06,0X00,0X00,0X08,0X90,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X10,0X00,0X00,0X03,0XF8,0X00,0X00,0X08,0X90,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X20,0X00,0X00,0X06,0X00,0X00,0X00,0X04,0X90,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X20,0X80,0X00,0X02,0X00,0X00,0X00,0X08,0X90,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X23,0X80,0X00,0X02,0X00,0X20,0X00,0X08,0X90,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X23,0X02,0X23,0X82,0X00,0X21,0XE0,0X08,0X90,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X25,0X06,0X2C,0XC2,0X00,0X22,0X20,0X08,0X88,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X59,0X0C,0X70,0X44,0X00,0X3C,0X20,0X00,0X48,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X53,0X1C,0XE0,0X44,0X00,0X60,0X10,0X00,0X08,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X62,0X27,0X20,0X24,0X00,0X40,0X1F,0X84,0X40,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X42,0X40,0X00,0X28,0X0E,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0XC3,0X80,0X00,0X2F,0XF0,0X00,0X00,0X00,0X08,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
};

const unsigned char gImage_frame_00_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0X80,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0X07,0X07,0X0F,0X0E,0X00,0X00,0X00,0X7F,0X07,0X07,0X0F,0X0E,0X00,
0X00,0X00,0X3F,0X87,0X07,0X06,0X0E,0X00,0X00,0X00,0X3F,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_01_delay[120] = { /* 0X00,0X01,0X3B,0X00,0X0F,0X00, */
0X00,0X00,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0X80,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0X0E,0X1C,0X1C,0X38,0X20,0X00,0X00,0X7F,0X0E,0X1C,0X1C,0X38,0X20,
0X00,0X00,0X7F,0XCE,0X0C,0X1C,0X18,0X20,0X00,0X00,0X3F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_02_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0X1E,0X1C,0X1C,0X3C,0X30,0X00,0X00,0X7F,0X9E,0X1C,0X1C,0X3C,0X30,
0X00,0X00,0X3F,0XEC,0X1C,0X1C,0X18,0X30,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_03_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0X9C,0X1C,0X38,0X38,0X30,0X00,0X00,0X7F,0X9C,0X1C,0X38,0X38,0X30,
0X00,0X00,0X3F,0XFC,0X1C,0X18,0X38,0X30,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_04_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XB8,0X38,0X38,0X70,0X70,0X00,0X00,0X7F,0XF8,0X38,0X38,0X70,0X70,
0X00,0X00,0X3F,0XFC,0X38,0X30,0X30,0X70,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_05_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XF8,0X70,0X70,0XE0,0XE0,0X00,0X00,0X7F,0XFC,0X70,0X70,0XE0,0XE0,
0X00,0X00,0X3F,0XFC,0X70,0X70,0X60,0XE0,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_06_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XFC,0X70,0XF0,0XE0,0XE0,0X00,0X00,0X7F,0XFC,0X70,0XF0,0XE0,0XE0,
0X00,0X00,0X3F,0XFC,0X70,0X60,0XE0,0XE0,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_07_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XE0,0XE1,0XE1,0XC1,0XC0,0X00,0X00,0X7F,0XE0,0XE1,0XE1,0XC1,0XC0,
0X00,0X00,0X3F,0XFC,0XE0,0XC1,0XC1,0XC0,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_08_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XE1,0XC1,0XC3,0XC3,0X80,0X00,0X00,0X7F,0XE1,0XC1,0XC3,0XC3,0X80,
0X00,0X00,0X3F,0XF9,0XC1,0XC1,0X83,0X80,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_09_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XC1,0XC3,0X83,0X83,0X80,0X00,0X00,0X7F,0XC1,0XC3,0X83,0X83,0X80,
0X00,0X00,0X3F,0XE1,0X81,0X83,0X83,0X00,0X00,0X00,0X3F,0XFC,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_10_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0X83,0X83,0X87,0X07,0X00,0X00,0X00,0X7F,0X83,0X83,0X87,0X07,0X00,
0X00,0X00,0X3F,0XC3,0X83,0X07,0X07,0X00,0X00,0X00,0X3F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XF8,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

const unsigned char gImage_frame_11_delay[120] = { /* 0X00,0X01,0X3C,0X00,0X0F,0X00, */
0X00,0X00,0X03,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XE0,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0X80,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0X87,0X07,0X0F,0X0E,0X00,0X00,0X00,0X7F,0X87,0X07,0X0F,0X0E,0X00,
0X00,0X00,0X3F,0X87,0X07,0X06,0X0E,0X00,0X00,0X00,0X3F,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X3F,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XF0,0X00,0X00,0X00,0X00,
0X00,0X00,0X07,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};


void Display_logo()
{
    display.clearDisplay();
    display.drawBitmap(0, 0, gImage_createbyyunen, 128, 64, 1);
    display.display();
    delay(500);
}
Password
void scanWifi()
{
  int n = WiFi.scanNetworks();
  delay(1000);
  if (n == 0)
  {
    Serial.println("no Wi-Fi networks found");
    display.clearDisplay();
    display.print("no Wi-Fi networks found");
  }
  else
  {
    for (int i = 0; i < n; ++i)
    {
      if(WiFi.SSID(i) == "---")
      {
          
          WiFi.begin(ssid, password);
          while (WiFi.status() != WL_CONNECTED)
          {
            delay(500);
            Serial.print(".");
            display.clearDisplay();
            display.print("Watting Wifi Connect!");
            delay(500);
          }
          Serial.println("WiFi connected!");
          is_connect = true;
      }
      else if(WiFi.SSID(i) == "---")
      {
        WiFi.begin(homessid, homepassword);
          while (WiFi.status() != WL_CONNECTED)
          {
            delay(500);
            Serial.print(".");
            display.clearDisplay();
            display.print("Watting Wifi Connect!");
            delay(500);
          }
          Serial.println("WiFi connected!");
          is_connect = true;
      }
      else if(WiFi.SSID(i) == "---")
      {
        WiFi.begin(canpanyssid, canpanypassword);
          while (WiFi.status() != WL_CONNECTED)
          {
            delay(500);
            Serial.print(".");
            display.clearDisplay();
            display.print("Watting Wifi Connect!");
            delay(500);
          }
          Serial.println("WiFi connected!");
          is_connect = true;
      }
    }
  }
}

void printLocalTime()
{   
  time_t epochTime = timeClient.getEpochTime();
  struct tm *ptm = gmtime ((time_t *)&epochTime);
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon+1;
  String currentMonthName = months[currentMonth-1];
  int currentYear = ptm->tm_year+1900;
  String currentDate = String(currentYear) + "/" + String(currentMonth) + "/" + String(monthDay);
  display.setCursor(18,2);
  display.print(currentDate); 
  display.setCursor(18,29);
//    display.print(daysOfTheWeek[timeClient.getDay()]);
  display.print(timeClient.getFormattedTime()); 
  
}

void setup() {
  Serial.begin(115200);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
  display.clearDisplay(); 
  Display_logo();
  display.clearDisplay();
  display.setTextSize(2.5);
  display.setTextColor(INVERSE);
  
  scanWifi();
  if (is_connect = true)
  {
      timeClient.begin();
      timeClient.update();
      printLocalTime();
      display.clearDisplay();
  }
}

void loop() {
  
//  t.handle();
  display.setTextColor(WHITE);
  printLocalTime();

  if(index_pca == 0)
    display.drawBitmap(26, 50, gImage_frame_00_delay, 64, 15, 1);
  else if(index_pca == 1)
    display.drawBitmap(26, 50, gImage_frame_01_delay, 64, 15, 1);
  else if(index_pca == 2)
    display.drawBitmap(26, 50, gImage_frame_02_delay, 64, 15, 1);
  else if(index_pca == 3)
    display.drawBitmap(26, 50, gImage_frame_03_delay, 64, 15, 1);
  else if(index_pca == 4)
    display.drawBitmap(26, 50, gImage_frame_04_delay, 64, 15, 1);
  else if(index_pca == 5)
    display.drawBitmap(26, 50, gImage_frame_05_delay, 64, 15, 1);
  else if(index_pca == 6)
    display.drawBitmap(26, 50, gImage_frame_06_delay, 64, 15, 1);
  else if(index_pca == 7)
    display.drawBitmap(26, 50, gImage_frame_07_delay, 64, 15, 1);
  else if(index_pca == 8)
    display.drawBitmap(26, 50, gImage_frame_08_delay, 64, 15, 1);
  else if(index_pca == 9)
    display.drawBitmap(26, 50, gImage_frame_09_delay, 64, 15, 1);
  else if(index_pca == 10)
    display.drawBitmap(26, 50, gImage_frame_10_delay, 64, 15, 1);
  else if(index_pca == 11)
    display.drawBitmap(26, 50, gImage_frame_11_delay, 64, 15, 1);
  display.display();
  display.clearDisplay();
  index_pca++;
  if(index_pca > 11)
    index_pca = 0;
}
